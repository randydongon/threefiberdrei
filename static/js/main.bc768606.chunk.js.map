{"version":3,"sources":["components/header.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","softShadows","SpinningMesh","position","color","speed","args","mesh","useRef","useFrame","current","rotation","x","y","useState","expand","setExpand","props","useSpring","scale","ref","onClick","castShadow","attach","factor","App","style","background","colorManagement","shadowMap","camera","fov","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","Math","PI","receiveShadow","opacity","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAeeA,EAbA,WACb,OACE,gCACE,yBAAKC,UAAU,QACb,oDAEF,yBAAKA,UAAU,WACb,0C,gBCIRC,cAEA,IAAMC,EAAe,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAExCC,EAAOC,mBAGbC,aAAS,kBAAOF,EAAKG,QAAQC,SAASC,EAAIL,EAAKG,QAAQC,SAASE,GAAK,OALZ,MAQ7BC,oBAAS,GARoB,mBAQlDC,EARkD,KAQ1CC,EAR0C,KAUnDC,EAAQC,YAAU,CACtBC,MAAOJ,EAAS,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,KAE3C,OACE,kBAAC,IAAER,KAAH,CACEJ,SAAUA,EACViB,IAAKb,EACLc,QAAS,kBAAML,GAAWD,IAC1BI,MAAOF,EAAME,MACbG,YAAU,GAEV,uCAAmBC,OAAO,WAAWjB,KAAMA,IAC3C,kBAAC,IAAD,CAAoBF,MAAOA,EAAOC,MAAOA,EAAOkB,OAAO,WAAWC,OAAQ,OA6DjEC,EA9CH,WACV,OACE,oCACE,kBAAC,EAAD,MAEA,kBAAC,IAAD,CACEC,MAAO,CAAEC,WAAY,WACrBC,iBAAe,EACfC,WAAS,EACTC,OAAQ,CAAE3B,SAAU,EAAE,EAAG,EAAG,IAAK4B,IAAK,KAGtC,kCAAcC,UAAW,KAEzB,sCACEV,YAAU,EACVnB,SAAU,CAAC,EAAG,GAAI,GAClB6B,UAAW,IACXC,uBAAsB,KACtBC,wBAAuB,KACvBC,oBAAmB,GACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,oBAAmB,GACnBC,wBAAuB,KAGzB,gCAAYpC,SAAU,EAAE,GAAI,GAAI,IAAK6B,UAAW,KAChD,gCAAY7B,SAAU,CAAC,GAAI,GAAI,GAAI6B,UAAW,MAC9C,+BAEE,0BAAMrB,SAAU,EAAE6B,KAAKC,GAAK,EAAG,EAAG,GAAItC,SAAU,CAAC,GAAI,EAAG,GAAIuC,eAAa,GACvE,yCAAqBnB,OAAO,WAAWjB,KAAM,CAAC,IAAK,OACnD,oCAAgBiB,OAAO,WAAWoB,QAAS,MAE7C,kBAAC,EAAD,CAAcxC,SAAU,CAAC,EAAG,EAAG,GAAIC,MAAM,UAAUE,KAAM,CAAC,EAAG,EAAG,GAAID,MAAO,IAC3E,kBAAC,EAAD,CAAcF,SAAU,EAAE,EAAG,GAAI,GAAIC,MAAM,UAAUC,MAAO,IAC5D,kBAAC,EAAD,CAAcF,SAAU,CAAC,EAAG,GAAI,GAAIC,MAAM,UAAUC,MAAO,KAG7D,kBAAC,IAAD,SChFYuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bc768606.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <div className='logo'>\r\n        <span>REACT THREE FIBER</span>\r\n      </div>\r\n      <div className='episode'>\r\n        <span>EP. 1</span>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useRef, useState } from \"react\";\r\n//R3F\r\nimport { Canvas, useFrame } from \"react-three-fiber\";\r\n// Deai - R3F\r\nimport { softShadows, MeshWobbleMaterial, OrbitControls } from \"drei\";\r\n//Components\r\nimport Header from \"./components/header\";\r\n// Styles\r\nimport \"./App.scss\";\r\n// React Spring\r\nimport { useSpring, a } from \"react-spring/three\";\r\n\r\n// soft Shadows\r\nsoftShadows();\r\n\r\nconst SpinningMesh = ({ position, color, speed, args }) => {\r\n  //ref to target the mesh\r\n  const mesh = useRef();\r\n\r\n  //useFrame allows us to re-render/update rotation on each frame\r\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\r\n\r\n  //Basic expand state\r\n  const [expand, setExpand] = useState(false);\r\n  // React spring expand animation\r\n  const props = useSpring({\r\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\r\n  });\r\n  return (\r\n    <a.mesh\r\n      position={position}\r\n      ref={mesh}\r\n      onClick={() => setExpand(!expand)}\r\n      scale={props.scale}\r\n      castShadow\r\n    >\r\n      <boxBufferGeometry attach=\"geometry\" args={args} />\r\n      <MeshWobbleMaterial color={color} speed={speed} attach=\"material\" factor={0.6} />\r\n    </a.mesh>\r\n\r\n    //Using Drei box if you want\r\n    // <Box {...props} ref={mesh} castShadow>\r\n    //   <MeshWobbleMaterial\r\n    //     {...props}\r\n    //     attach='material'\r\n    //     factor={0.6}\r\n    //     Speed={1}\r\n    //   />\r\n    // </Box>\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Header />\r\n      {/* Our Scene & Camera is already built into our canvas */}\r\n      <Canvas\r\n        style={{ background: \"#1c1c1c\" }}\r\n        colorManagement\r\n        shadowMap\r\n        camera={{ position: [-5, 2, 10], fov: 60 }}\r\n      >\r\n        {/* This light makes things look pretty */}\r\n        <ambientLight intensity={0.3} />\r\n        {/* Our main source of light, also casting our shadow */}\r\n        <directionalLight\r\n          castShadow\r\n          position={[0, 10, 0]}\r\n          intensity={1.5}\r\n          shadow-mapSize-width={1024}\r\n          shadow-mapSize-height={1024}\r\n          shadow-camera-far={50}\r\n          shadow-camera-left={-10}\r\n          shadow-camera-right={10}\r\n          shadow-camera-top={10}\r\n          shadow-camera-bottom={-10}\r\n        />\r\n        {/* A light to help illumnate the spinning boxes */}\r\n        <pointLight position={[-10, 0, -20]} intensity={0.5} />\r\n        <pointLight position={[0, -10, 0]} intensity={1.5} />\r\n        <group>\r\n          {/* This mesh is the plane (The floor) */}\r\n          <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -3, 0]} receiveShadow>\r\n            <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\r\n            <shadowMaterial attach=\"material\" opacity={0.3} />\r\n          </mesh>\r\n          <SpinningMesh position={[0, 1, 0]} color=\"#033F63\" args={[3, 2, 1]} speed={2} />\r\n          <SpinningMesh position={[-2, 1, -5]} color=\"#AD343E\" speed={6} />\r\n          <SpinningMesh position={[5, 1, -2]} color=\"#F2AF29\" speed={6} />\r\n        </group>\r\n        {/* Allows us to move the canvas around for different prespectives */}\r\n        <OrbitControls />\r\n      </Canvas>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}